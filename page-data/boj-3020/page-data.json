{"componentChunkName":"component---src-templates-post-jsx","path":"/boj-3020/","result":{"data":{"site":{"siteMetadata":{"title":"pointing the dots"}},"markdownRemark":{"id":"57c571b1-1719-5a80-8532-5a6140d2eefc","excerpt":"☘️ 문제 https://www.acmicpc.net/problem/3020 ☘️ 풀이 높이가 n인 장애물은 1~n 사이의 높이로 날아가는 경우에도 모두 부딪히게 됩니다. 예를 들어, 높이가 4인 장애물은 높이 1로 날라가도, 높이 2로 날라가도, 높이 3으로 날라가도, 높이 4로 날라가도 모두 부딪힙니다. 이를 이용해서 우선 각 높이들의 갯수을 모두 입력 …","html":"<h2>☘️ 문제</h2>\n<p><a href=\"https://www.acmicpc.net/problem/3020\">https://www.acmicpc.net/problem/3020</a></p>\n<h2>☘️ 풀이</h2>\n<p>높이가 n인 장애물은 1~n 사이의 높이로 날아가는 경우에도 모두 부딪히게 됩니다. 예를 들어, 높이가 4인 장애물은 높이 1로 날라가도, 높이 2로 날라가도, 높이 3으로 날라가도, 높이 4로 날라가도 모두 부딪힙니다. 이를 이용해서 우선 각 높이들의 갯수을 모두 입력 받은 다음, 각 장애물의 높이보다 낲은 높이에도 모두 갯수를 표시합니다.</p>\n<p>배열에 각 높이의 갯수를 저장합니다. 입력되는 높이들의 갯수를 저장합니다. 이후, 높이의 역순(4→3→2→1)으로 누적합을 진행합니다. 석순과 종유석은 기준점이 다를 뿐이기 때문에, 우선 각각 똑같이 진행한 후, 나중에 높이의 기준점만 맞춰주면 됩니다.</p>\n<p>이제 각 높이를 순회하면서 부딪히는 장애물의 갯수를 세어주면 됩니다. 석순(<code class=\"language-text\">bottom</code>)의 높이가 <code class=\"language-text\">height</code>인 경우, 종유석(<code class=\"language-text\">top</code>)의 높이는 <code class=\"language-text\">h - height + 1</code>입니다.</p>\n<h2>☘️ 전체 코드 (파이썬)</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\n\n<span class=\"token builtin\">input</span> <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>readline\n\nINF <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inf\"</span><span class=\"token punctuation\">)</span>\n\n\nn<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nbottom <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\ntop <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _h <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        bottom<span class=\"token punctuation\">[</span>_h<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        top<span class=\"token punctuation\">[</span>_h<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bottom<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> bottom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    top<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> top<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\nanswer <span class=\"token operator\">=</span> INF\ncount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">for</span> height <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cnt <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> top<span class=\"token punctuation\">[</span>h <span class=\"token operator\">-</span> height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">&lt;</span> answer<span class=\"token punctuation\">:</span>\n        answer <span class=\"token operator\">=</span> cnt\n        count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">elif</span> answer <span class=\"token operator\">==</span> cnt<span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>☘️ 전체 코드 (자바)</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BufferedReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStreamReader</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringTokenizer</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bottom<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> answer<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">StringTokenizer</span> st <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        h <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        bottom <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        top <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                bottom<span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                top<span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bottom<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> bottom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            top<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> top<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        answer <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> height <span class=\"token operator\">&lt;</span> h <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> height<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> breakCount <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">[</span>height<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> top<span class=\"token punctuation\">[</span>h <span class=\"token operator\">-</span> height <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>breakCount <span class=\"token operator\">&lt;</span> answer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                answer <span class=\"token operator\">=</span> breakCount<span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>breakCount <span class=\"token operator\">==</span> answer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"[백준/BOJ] 3020. 개똥벌레 (파이썬/자바)","date":"April 03, 2024","tags":["PS","BOJ","백준","Python","Java","누적합"],"series":null},"fields":{"slug":"/boj-3020/"}},"seriesList":{"edges":[{"node":{"id":"6df80ce2-79eb-584d-871c-9ec94a17114c","fields":{"slug":"/n+1-problem/"},"frontmatter":{"title":"[JPA] N+1 문제와 해결법"}}},{"node":{"id":"bcaaf6e4-35eb-571f-9a88-4542117a9f40","fields":{"slug":"/http-vs-https/"},"frontmatter":{"title":"[Network] HTTP와 HTTPS"}}},{"node":{"id":"8894e599-37c7-5129-ab21-244e05db5ad2","fields":{"slug":"/boj-5549/"},"frontmatter":{"title":"[백준/BOJ] 5549. 행성 탐사 (파이썬)"}}},{"node":{"id":"a6cccf72-ac4a-5a0a-94d6-f0fd6a37c67c","fields":{"slug":"/boj-22862/"},"frontmatter":{"title":"[백준/BOJ] 22862. 가장 긴 짝수 연속한 부분 수열 (large) (파이썬)"}}},{"node":{"id":"b705571c-56ed-53b8-bc4a-28b8a6ac225b","fields":{"slug":"/boj-13144/"},"frontmatter":{"title":"[백준/BOJ] 13144. List of Unique Numbers (파이썬)"}}},{"node":{"id":"25166810-bce0-59df-be14-b482f52201b9","fields":{"slug":"/programmers-67259/"},"frontmatter":{"title":"[프로그래머스] 67259. 경주로 건설 (파이썬)"}}},{"node":{"id":"cedea521-2919-5b27-8c40-5b7b7955957d","fields":{"slug":"/boj-2560/"},"frontmatter":{"title":"[백준/BOJ] 2560. 짚신벌레 (파이썬)"}}},{"node":{"id":"57c571b1-1719-5a80-8532-5a6140d2eefc","fields":{"slug":"/boj-3020/"},"frontmatter":{"title":"[백준/BOJ] 3020. 개똥벌레 (파이썬/자바)"}}},{"node":{"id":"1948a1d0-9b32-57fd-9b38-efcb9fd17ea9","fields":{"slug":"/boj-1365/"},"frontmatter":{"title":"[백준/BOJ] 1365. 꼬인 전깃줄 (파이썬)"}}},{"node":{"id":"d4fa2a6f-24b5-5c1e-994d-83f00f4be67d","fields":{"slug":"/boj-11066/"},"frontmatter":{"title":"[백준/BOJ] 11066. 파일 합치기 (파이썬/자바)"}}},{"node":{"id":"ec4a3877-be55-5424-976d-62d6a6616693","fields":{"slug":"/boj-2293/"},"frontmatter":{"title":"[백준/BOJ] 2293. 동전 1 (파이썬)"}}},{"node":{"id":"0b952d2b-b9ac-5d71-8663-da4961afefa3","fields":{"slug":"/boj-2283/"},"frontmatter":{"title":"[백준/BOJ] 2283. 구간 자르기 (파이썬)"}}},{"node":{"id":"ca6873fb-a438-5c69-93c2-ad28fef74df1","fields":{"slug":"/aws-alb-502/"},"frontmatter":{"title":"AWS ALB가 502를 내뱉는다"}}}]},"previous":{"fields":{"slug":"/boj-2560/"},"frontmatter":{"title":"[백준/BOJ] 2560. 짚신벌레 (파이썬)"}},"next":{"fields":{"slug":"/boj-1365/"},"frontmatter":{"title":"[백준/BOJ] 1365. 꼬인 전깃줄 (파이썬)"}}},"pageContext":{"id":"57c571b1-1719-5a80-8532-5a6140d2eefc","series":null,"previousPostId":"cedea521-2919-5b27-8c40-5b7b7955957d","nextPostId":"1948a1d0-9b32-57fd-9b38-efcb9fd17ea9"}},"staticQueryHashes":[],"slicesMap":{}}